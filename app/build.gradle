/*
 * MythtvPlayerForAndroid. An application for Android users to play MythTV Recordings and Videos
 * Copyright (c) 2016. Daniel Frey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply from: '../jacoco.gradle'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'me.tatarka.retrolambda'

android {

    def applicationBranch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    def applicationSHA1 = "git rev-parse --short HEAD".execute().text.trim()
    def applicationTag = "git describe --abbrev=0 --dirty --tags".execute().text.trim()

    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    adbOptions {

        timeOutInMs 600000 // set timeout to 1 minute

    }

    dexOptions {

        maxProcessCount 2
        javaMaxHeapSize "2g"

    }

    defaultConfig {

        minSdkVersion 17
        targetSdkVersion 25

        multiDexEnabled true

        applicationId 'org.mythtv.android'
        versionCode 1714301
        versionName "3.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resValue "string", "branchName", applicationBranch
        resValue "string", "shaName", applicationSHA1
        resValue "string", "tagName", applicationTag
        resValue "string", "versionName", versionName

        if (project.hasProperty("mythtvplayer.google-cast")
                && new File(project.property("mythtvplayer.google-cast") + ".gradle").exists()) {

            resValue "string", "app_id", "$rootProject.ext.googleCastAppId"

        } else {

            resValue "string", "app_id", "B5FDDDFA"

        }

    }

    buildTypes {

        debug {

            shrinkResources false
            minifyEnabled false
            testCoverageEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        release {

            shrinkResources true
            minifyEnabled true // Enables code shrinking for the release build type.
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

    }

    productFlavors {

        // Define separate dev and prod product flavors.
        dev {

            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21

        }

        prod {

        }

    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

    }

    if (project.hasProperty("mythtvplayer.signing")
            && new File(project.property("mythtvplayer.signing") + ".gradle").exists()) {

        apply from: project.property("mythtvplayer.signing") + ".gradle";

    }

    packagingOptions {

        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
//        exclude 'changelog.txt'

    }

    lintOptions {

        abortOnError false

    }

    testOptions {

        unitTests {

            returnDefaultValues = true

            all {

                jacoco {
                    includeNoLocationClasses = true
                }

            }
        }

    }

}

dependencies {

    compile "com.google.dagger:dagger:${project.ext.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${project.ext.daggerVersion}"

    compile "com.jakewharton:butterknife:${project.ext.butterKnifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${project.ext.butterKnifeVersion}"

    compile "com.android.support:appcompat-v7:${project.ext.supportVersion}"
    compile "com.android.support:design:${project.ext.supportVersion}"
    compile "com.android.support:cardview-v7:${project.ext.supportVersion}"
    compile "com.android.support:recyclerview-v7:${project.ext.supportVersion}"
    compile "com.android.support:palette-v7:${project.ext.supportVersion}"
    compile "io.reactivex:rxjava:${project.ext.rxJavaVersion}"
    compile "io.reactivex:rxandroid:${project.ext.rxAndroidVersion}"
    compile "com.squareup.picasso:picasso:${project.ext.picassoVersion}"
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    compile "com.android.support:support-annotations:${project.ext.supportVersion}"
    compile "com.android.support:preference-v14:${project.ext.supportVersion}"
    compile "com.android.support:mediarouter-v7:${project.ext.supportVersion}"
    compile "com.google.android.gms:play-services-cast-framework:${project.ext.playServicesVersion}"
    compile "com.squareup.okhttp3:okhttp:${project.ext.okHttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${project.ext.okHttpVersion}"
    compile "joda-time:joda-time:${project.ext.jodaVersion}"
    compile "com.google.code.gson:gson:${project.ext.gsonVersion}"
    compile "com.facebook.stetho:stetho:${project.ext.stethoVersion}"
    compile "com.facebook.stetho:stetho-okhttp3:${project.ext.stethoVersion}"
    compile "xyz.danoz:recyclerviewfastscroller:${project.ext.recyclerviewfastscrollerVersion}"
    compile "com.android.support:multidex:${project.ext.multidexVersion}"
    compile "com.googlecode.android-query:android-query:${project.ext.androidQueryVersion}"
    compile "com.google.firebase:firebase-core:${project.ext.firebaseVersion}"
    compile "com.google.firebase:firebase-crash:${project.ext.firebaseVersion}"

    compile "com.android.support:leanback-v17:${project.ext.supportVersion}"
    compile "com.android.support:preference-leanback-v17:${project.ext.supportVersion}"
    compile "com.github.bumptech.glide:glide:${project.ext.glideVersion}"

    debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:${project.ext.leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${project.ext.leakCanaryVersion}"

    provided "javax.annotation:jsr250-api:${project.ext.javaxAnnotationVersion}"

    // Dependencies for local testing
    testCompile "junit:junit:${project.ext.jUnitVersion}"
    testCompile "org.hamcrest:hamcrest-all:${project.ext.hamcrestVersion}"
    testCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
    testCompile "org.hamcrest:hamcrest-core:${project.ext.hamcrestVersion}"
    testCompile "org.robolectric:robolectric:${project.ext.robolectricVersion}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${project.ext.leakCanaryVersion}"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:${project.ext.testingSupportRunnerVersion}"
    androidTestCompile "com.android.support.test:rules:${project.ext.testingSupportRulesVersion}"

    // Espresso UI Testing dependencies.
    androidTestCompile "com.android.support.test.espresso:espresso-core:${project.ext.espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${project.ext.espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${project.ext.espressoVersion}"

    androidTestCompile "com.android.support:support-v4:${project.ext.supportVersion}"
    androidTestCompile "com.android.support:support-annotations:${project.ext.supportVersion}"
    androidTestCompile "org.mockito:mockito-core:${project.ext.mockitoVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker:${project.ext.dexmakerVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:${project.ext.dexmakerVersion}"
    androidTestCompile "org.robolectric:robolectric:${project.ext.robolectricVersion}"

    androidTestCompile("com.android.support:multidex-instrumentation:${project.ext.multidexVersion}") {
        exclude group: 'com.android.support', module: 'multidex'
    }

}

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:${project.ext.supportVersion}"
}

configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

retrolambda {
    jvmArgs '-noverify'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-crash'
