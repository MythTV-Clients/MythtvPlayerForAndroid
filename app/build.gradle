/*
 * MythtvPlayerForAndroid. An application for Android users to play MythTV Recordings and Videos
 * Copyright (c) 2016. Daniel Frey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

android {

    def applicationBranch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    def applicationSHA1 = "git rev-parse --short HEAD".execute().text.trim()
    def applicationTag = "git describe --abbrev=0 --dirty --tags".execute().text.trim()

    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    dexOptions {

        maxProcessCount 2
        javaMaxHeapSize "2g"

    }

    defaultConfig {

        minSdkVersion 17
        targetSdkVersion 23

        multiDexEnabled true

        applicationId 'org.mythtv.android'
        versionCode 1714211
        versionName "2.1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resValue "string", "branchName", applicationBranch
        resValue "string", "shaName", applicationSHA1
        resValue "string", "tagName", applicationTag
        resValue "string", "versionName", versionName

    }

    buildTypes {

        debug {

//            signingConfig signingConfigs.debug
//            minifyEnabled true
            proguardFiles getDefaultProguardFile( 'proguard-android.txt' ),
                    'proguard-rules.pro',
                    'proguard-rules-debug.pro'

            testCoverageEnabled = true

        }

        release {

            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile( 'proguard-android.txt' ), 'proguard-rules.pro'

        }

    }

    productFlavors {

        // Define separate dev and prod product flavors.
        dev {

            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21

        }

        prod {

            minSdkVersion 17

        }

    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

    }

    if( project.hasProperty( "mythtvplayer.signing" )
            && new File( project.property( "mythtvplayer.signing" ) + ".gradle" ).exists() ) {

        apply from: project.property( "mythtvplayer.signing" ) + ".gradle";

    }

    packagingOptions {

        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
//        exclude 'changelog.txt'

    }

    lintOptions {

        quiet true
        abortOnError false
        ignoreWarnings false
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'

        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.

    }

    signingConfigs {

        debug {

            storeFile file( '../buildsystem/debug.keystore' )
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'

        }

    }

    testOptions {

        unitTests {

            returnDefaultValues = true

            all {

                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }

            }
        }

    }

}

dependencies {

    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided "org.projectlombok:lombok:${lombokVersion}"
    apt "org.projectlombok:lombok:${lombokVersion}"

    compile "com.google.dagger:dagger:${daggerVersion}"
    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    compile "com.android.support:appcompat-v7:${androidSupportVersion}"
    compile "com.android.support:design:${androidSupportVersion}"
    compile "com.android.support:cardview-v7:${androidSupportVersion}"
    compile "com.android.support:recyclerview-v7:${androidSupportVersion}"
    compile "com.android.support:palette-v7:${androidSupportVersion}"
    compile "io.reactivex:rxjava:${rxJavaVersion}"
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    compile "com.squareup.picasso:picasso:${picassoVersion}"
    compile "com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.2"
    compile "com.android.support:support-annotations:${androidSupportVersion}"
    compile "com.android.support:preference-v14:${androidSupportVersion}"
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    compile "joda-time:joda-time:${jodaVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"
    compile "com.facebook.stetho:stetho:${stethoVersion}"
    compile "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"
    compile "xyz.danoz:recyclerviewfastscroller:${recyclerviewfastscrollerVersion}"
    compile "com.android.support:multidex:${multidexVersion}"

    compile "com.android.support:leanback-v17:${androidSupportVersion}"
    compile "com.android.support:preference-leanback-v17:${androidSupportVersion}"
    compile "com.github.bumptech.glide:glide:${glideVersion}"

    debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    provided "javax.annotation:jsr250-api:${javaxAnnotationVersion}"

    // Dependencies for local testing
    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    testCompile "org.robolectric:robolectric:${robolectricVersion}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:${testingSupportRunnerVersion}"
    androidTestCompile "com.android.support.test:rules:${testingSupportRulesVersion}"

    // Espresso UI Testing dependencies.
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"

    androidTestCompile "com.android.support:support-v4:${androidSupportVersion}"
    androidTestCompile "com.android.support:support-annotations:${androidSupportVersion}"
    androidTestCompile "org.mockito:mockito-core:${mockitoVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker:${dexmakerVersion}"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:${dexmakerVersion}"
    androidTestCompile "org.robolectric:robolectric:${robolectricVersion}"

    androidTestCompile( "com.android.support:multidex-instrumentation:${multidexVersion}" ) {
        exclude group: 'com.android.support', module: 'multidex'
    }

}

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.androidSupportVersion"
}

configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

retrolambda {
    jvmArgs '-noverify'
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}

apply plugin: 'com.google.gms.google-services'
