apply plugin: 'jacoco'

task javaCodeCoverage(type: JacocoReport, dependsOn: 'testDevDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination "$project.buildDir/outputs/jacoco/"
    }

    def classFileTree = fileTree(
            dir: "${buildDir}/intermediates/classes/dev/debug",
            excludes: [
                    '**/*Test*.*',
                    '**/*AutoValue_*.*',
                    '**/*JavascriptBridge.class',
                    '**/R.class',
                    '**/R$*.class',
                    '**/Manifest*.*',
                    'android/**/*.*',
                    '**/BuildConfig.*',
                    '**/*$ViewBinder*.*',
                    '**/*$ViewInjector*.*',
                    '**/Lambda$*.class',
                    '**/Lambda.class',
                    '**/*Lambda.class',
                    '**/*Lambda*.class',
                    '**/*$InjectAdapter.class',
                    '**/*$ModuleAdapter.class',
                    '**/*$ViewInjector*.class',
                    '**/*_MembersInjector.class', //Dagger2 generated code
                    '*/*_MembersInjector*.*', //Dagger2 generated code
                    '**/*_*Factory*.*', //Dagger2 generated code
                    '*/*Component*.*', //Dagger2 generated code
                    '**/*Module*.*' //Dagger2 generated code
            ] //,
            //includes: ['**/*Presenter*.class']
    )

    classDirectories = files([classFileTree])
    sourceDirectories = files("${project.projectDir}/src/main/java")
    executionData = files("${buildDir}/jacoco/testDevDebugUnitTest.exec")
}