apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

def jacocoDaggerMap = [:]

task jacoco(type: JacocoReport) {
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        html.destination "${buildDir}/reports/coverage"
    }

    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            exclude: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$InjectAdapter.class',
                    '**/*$ModuleAdapter.class',
                    '**/*$ViewInjector*.class',
                    '**/RestServiceFactory*.class',
                    '**/ActivityModule*.class',
                    '**/preference/*.class'
            ])
    sourceDirectories = files android.sourceSets.main.java.srcDirs
    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"

    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File("${buildDir}/intermediates/classes/debug").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                def renamed = file.path.replace '$$', '$'
                jacocoDaggerMap[renamed] = file.path
                file.renameTo renamed
            }
        }
    }

    doLast {
        // Revert renamed files back to their generated names
        jacocoDaggerMap.each { renamed, original ->
            new File(renamed).renameTo original
        }
        println "coveralls report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        println "jacoco report has been generated to file://${reports.html.destination}/index.html"
    }
}